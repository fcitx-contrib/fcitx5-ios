diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1a1637a..92a41e0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,8 +10,6 @@ include(ECMSetupVersion)
 include(ECMUninstallTarget)
 
 find_package(Gettext REQUIRED)
-find_package(Fcitx5Core 5.1.11 REQUIRED)
-find_package(Fcitx5Module REQUIRED COMPONENTS Notifications)
 find_package(PkgConfig REQUIRED)
 find_package(Pthread REQUIRED)
 
@@ -45,7 +43,7 @@ add_definitions(-DFCITX_GETTEXT_DOMAIN=\"fcitx5-rime\")
 add_definitions(-DFCITX_RIME_VERSION=\"${PROJECT_VERSION}\")
 fcitx5_add_i18n_definition()
 
-include("${FCITX_INSTALL_CMAKECONFIG_DIR}/Fcitx5Utils/Fcitx5CompilerSettings.cmake")
+include("../../fcitx5/cmake/Fcitx5CompilerSettings.cmake")
 
 add_subdirectory(po)
 add_subdirectory(src)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 0854a9a..a3ef4a0 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -22,7 +22,9 @@ else()
     add_definitions(-DFCITX_RIME_NO_DBUS)
 endif()
 
-add_library(rime MODULE ${RIME_SOURCES})
+add_library(rime STATIC ${RIME_SOURCES})
+target_include_directories(rime PRIVATE "${CMAKE_BINARY_DIR}/ipc/include")
+add_dependencies(rime FcitxIpc)
 target_link_libraries(rime ${RIME_LINK_LIBRARIES})
 install(TARGETS rime DESTINATION "${CMAKE_INSTALL_LIBDIR}/fcitx5")
 fcitx5_translate_desktop_file(rime.conf.in rime.conf)
diff --git a/src/rimeengine.cpp b/src/rimeengine.cpp
index 090ee37..e924ba7 100644
--- a/src/rimeengine.cpp
+++ b/src/rimeengine.cpp
@@ -47,6 +47,8 @@
 #include <utility>
 #include <vector>
 
+#include "fcitxipc-swift.h"
+
 FCITX_DEFINE_LOG_CATEGORY(rime, "rime");
 
 namespace fcitx {
@@ -197,11 +199,17 @@ RimeEngine::RimeEngine(Instance *instance)
     deployAction_.setIcon("fcitx_rime_deploy");
     deployAction_.setShortText(_("Deploy"));
     deployAction_.connect<SimpleAction::Activated>([this](InputContext *ic) {
+#if 0
         deploy();
         auto *state = this->state(ic);
         if (state && ic->hasFocus()) {
             state->updateUI(ic, false);
         }
+#endif
+        std::string f5iEnv = getenv("F5I_ENV");
+        if (f5iEnv == "keyboard") {
+            FcitxIpc::openURL("fcitx://config/addon/rime/deploy");
+        }
     });
     instance_->userInterfaceManager().registerAction("fcitx-rime-deploy",
                                                      &deployAction_);
@@ -210,11 +218,17 @@ RimeEngine::RimeEngine(Instance *instance)
     syncAction_.setShortText(_("Synchronize"));
 
     syncAction_.connect<SimpleAction::Activated>([this](InputContext *ic) {
+#if 0
         sync();
         auto *state = this->state(ic);
         if (state && ic->hasFocus()) {
             state->updateUI(ic, false);
         }
+#endif
+        std::string f5iEnv = getenv("F5I_ENV");
+        if (f5iEnv == "keyboard") {
+            FcitxIpc::openURL("fcitx://config/addon/rime/sync");
+        }
     });
     instance_->userInterfaceManager().registerAction("fcitx-rime-sync",
                                                      &syncAction_);
@@ -305,7 +319,10 @@ void RimeEngine::rimeStart(bool fullcheck) {
     }
     api_->initialize(&fcitx_rime_traits);
     api_->set_notification_handler(&rimeNotificationHandler, this);
+    // Don't deploy on start in keyboard.
+    if (fullcheck) {
     api_->start_maintenance(fullcheck);
+    }
 
     if (!api_->is_maintenance_mode()) {
         updateAppOptions();
@@ -582,12 +599,14 @@ void RimeEngine::notify(RimeSessionId session, const std::string &messageType,
     bool blockMessage = false;
     if (messageType == "deploy") {
         tipId = "fcitx-rime-deploy";
-        icon = "fcitx_rime_deploy";
         if (messageValue == "start") {
             message = _("Rime is under maintenance. It may take a few "
                         "seconds. Please wait until it is finished...");
+            icon = "running";
         } else if (messageValue == "success") {
             message = _("Rime is ready.");
+            icon = "success";
+            FcitxIpc::requestReload();
             if (!api_->is_maintenance_mode()) {
                 if (needRefreshAppOption_) {
                     api_->deploy_config_file("fcitx5.yaml", "config_version");
@@ -602,6 +621,7 @@ void RimeEngine::notify(RimeSessionId session, const std::string &messageType,
             needRefreshAppOption_ = false;
             message = _("Rime has encountered an error. "
                         "See log for details.");
+            icon = "error";
             blockMessage = true;
         }
     } else if (messageType == "option") {
diff --git a/src/rimeengine.h b/src/rimeengine.h
index 6bec003..10940c8 100644
--- a/src/rimeengine.h
+++ b/src/rimeengine.h
@@ -238,7 +238,6 @@ private:
 class RimeEngineFactory : public AddonFactory {
 public:
     AddonInstance *create(AddonManager *manager) override {
-        registerDomain("fcitx5-rime", FCITX_INSTALL_LOCALEDIR);
         return new RimeEngine(manager->instance());
     }
 };
