diff --git a/src/rimeengine.cpp b/src/rimeengine.cpp
index cdaaa3d..0bd9298 100644
--- a/src/rimeengine.cpp
+++ b/src/rimeengine.cpp
@@ -48,6 +48,8 @@
 #include <utility>
 #include <vector>
 
+#include "fcitxipc-swift.h"
+
 FCITX_DEFINE_LOG_CATEGORY(rime_log, "rime");
 
 namespace fcitx::rime {
@@ -181,12 +183,15 @@ RimeEngine::RimeEngine(Instance *instance)
       sessionPool_(this, getSharedStatePolicy()) {
     if constexpr (isAndroid() || isApple()) {
         const auto &sp = StandardPaths::global();
+        sharedDataDir_ = sp.locate(StandardPathsType::Data, "rime-data");
+#if 0
         std::string defaultYaml =
             sp.locate(StandardPathsType::Data, "rime-data/default.yaml");
         if (defaultYaml.empty()) {
             throw std::runtime_error("Fail to locate shared data directory");
         }
         sharedDataDir_ = fcitx::fs::dirName(defaultYaml);
+#endif
     } else {
         sharedDataDir_ = RIME_DATA_DIR;
     }
@@ -201,11 +206,17 @@ RimeEngine::RimeEngine(Instance *instance)
     deployAction_.setIcon("fcitx_rime_deploy");
     deployAction_.setShortText(_("Deploy"));
     deployAction_.connect<SimpleAction::Activated>([this](InputContext *ic) {
+#if 0
         deploy();
         auto *state = this->state(ic);
         if (state && ic->hasFocus()) {
             state->updateUI(ic, false);
         }
+#endif
+        std::string f5iEnv = getenv("F5I_ENV");
+        if (f5iEnv == "keyboard") {
+            FcitxIpc::openURL("fcitx://config/addon/rime/deploy");
+        }
     });
     instance_->userInterfaceManager().registerAction("fcitx-rime-deploy",
                                                      &deployAction_);
@@ -214,11 +225,17 @@ RimeEngine::RimeEngine(Instance *instance)
     syncAction_.setShortText(_("Synchronize"));
 
     syncAction_.connect<SimpleAction::Activated>([this](InputContext *ic) {
+#if 0
         sync(/*userTriggered=*/true);
         auto *state = this->state(ic);
         if (state && ic->hasFocus()) {
             state->updateUI(ic, false);
         }
+#endif
+        std::string f5iEnv = getenv("F5I_ENV");
+        if (f5iEnv == "keyboard") {
+            FcitxIpc::openURL("fcitx://config/addon/rime/sync");
+        }
     });
     instance_->userInterfaceManager().registerAction("fcitx-rime-sync",
                                                      &syncAction_);
@@ -293,7 +310,10 @@ void RimeEngine::rimeStart(bool fullcheck) {
     }
     api_->initialize(&fcitx_rime_traits);
     api_->set_notification_handler(&rimeNotificationHandler, this);
+    // Don't deploy on start in keyboard.
+    if (fullcheck) {
     api_->start_maintenance(fullcheck);
+    }
 
     if (!api_->is_maintenance_mode()) {
         updateAppOptions();
@@ -521,12 +541,14 @@ void RimeEngine::notify(RimeSessionId session, const std::string &messageType,
     bool blockMessage = false;
     if (messageType == "deploy") {
         tipId = "fcitx-rime-deploy";
-        icon = "fcitx_rime_deploy";
         if (messageValue == "start") {
             message = _("Rime is under maintenance. It may take a few "
                         "seconds. Please wait until it is finished...");
+            icon = "running";
         } else if (messageValue == "success") {
             message = _("Rime is ready.");
+            icon = "success";
+            FcitxIpc::requestReload();
             if (!api_->is_maintenance_mode()) {
                 if (needRefreshAppOption_) {
                     api_->deploy_config_file("fcitx5.yaml", "config_version");
@@ -541,6 +563,7 @@ void RimeEngine::notify(RimeSessionId session, const std::string &messageType,
             needRefreshAppOption_ = false;
             message = _("Rime has encountered an error. "
                         "See log for details.");
+            icon = "error";
             blockMessage = true;
         }
     } else if (messageType == "option") {
